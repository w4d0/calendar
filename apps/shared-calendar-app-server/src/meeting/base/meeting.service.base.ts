/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Meeting as PrismaMeeting,
  User as PrismaUser,
} from "@prisma/client";

export class MeetingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MeetingCountArgs, "select">): Promise<number> {
    return this.prisma.meeting.count(args);
  }

  async meetings(args: Prisma.MeetingFindManyArgs): Promise<PrismaMeeting[]> {
    return this.prisma.meeting.findMany(args);
  }
  async meeting(
    args: Prisma.MeetingFindUniqueArgs
  ): Promise<PrismaMeeting | null> {
    return this.prisma.meeting.findUnique(args);
  }
  async createMeeting(args: Prisma.MeetingCreateArgs): Promise<PrismaMeeting> {
    return this.prisma.meeting.create(args);
  }
  async updateMeeting(args: Prisma.MeetingUpdateArgs): Promise<PrismaMeeting> {
    return this.prisma.meeting.update(args);
  }
  async deleteMeeting(args: Prisma.MeetingDeleteArgs): Promise<PrismaMeeting> {
    return this.prisma.meeting.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.meeting
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
